#include <stdio.h>
#include <limits.h>

#define INF INT_MAX
#define V 7  // Number of vertices

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// Function to print the shortest path
void printPath(int path[], int v) {
    if (path[v] == -1) {
        printf("%d", v + 1);
        return;
    }
    printPath(path, path[v]);
    printf(" -> %d", v + 1);
}

// Bellman-Ford Algorithm
void BellmanFord(struct Edge edges[], int distance[V][V], int path[], int edgeCount, int src) {
    // Initialize distances and path array
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            distance[i][j] = INF;
        }
        path[i] = -1;
    }

    distance[0][src] = 0;

    // Relax all edges (V - 1) times
    for (int i = 1; i < V; i++) {
        for (int j = 0; j < V; j++) {
            distance[i][j] = distance[i - 1][j];
        }

        for (int j = 0; j < edgeCount; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int w = edges[j].weight;

            if (distance[i - 1][u] != INF && distance[i - 1][u] + w < distance[i][v]) {
                distance[i][v] = distance[i - 1][u] + w;
                path[v] = u;
            }
        }
    }

    // Check for negative-weight cycle
    int hasNegativeCycle = 0;
    for (int j = 0; j < edgeCount; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int w = edges[j].weight;

        if (distance[V - 1][u] != INF && distance[V - 1][u] + w < distance[V - 1][v]) {
            hasNegativeCycle = 1;
            break;
        }
    }

    // Print table of distances
    printf("\t1->1\t1->2\t1->3\t1->4\t1->5\t1->6\t1->7\n");
    for (int i = 1; i < V; i++) {
        printf("%d\t", i);
        for (int j = 0; j < V; j++) {
            if (distance[i][j] == INF)
                printf("#\t");
            else
                printf("%d\t", distance[i][j]);
        }
        printf("\n");
    }

    if (hasNegativeCycle) {
        printf("\nNegative weight cycle detected!\n");
        return;
    }

    printf("\nNo negative weight cycle detected.\n");

    // Print shortest paths
    printf("\nShortest Paths from Source (1):\n");
    for (int i = 1; i < V; i++) {
        if (distance[V - 1][i] == INF) {
            printf("Path to %d: No path available\n", i + 1);
        } else {
            printf("Path to %d: ", i + 1);
            printPath(path, i);
            printf(" | Total Weight: %d\n", distance[V - 1][i]);
        }
    }
}

// Driver Code
int main() {
    // Adjacency matrix representation
  int adj[V][V] = {
    {0,   6,   5,   5,   INF, INF, INF}, // From 0 (1)
    {INF, 0,   INF, INF, -1,  INF, INF}, // From 1 (2)
    {INF, -2,  0,   INF, 1,   INF, INF}, // From 2 (3)
    {INF, INF, -2,  0,   INF, -1,  INF}, // From 3 (4)
    {INF, INF, INF, INF, 0,   INF, 3},   // From 4 (5)
    {INF, INF, INF, INF, INF, 0,   3},   // From 5 (6)
    {INF, INF, INF, INF, INF, INF, 0}    // From 6 (7)
};

    // Convert adjacency matrix to edge list
    struct Edge edges[V * V];
    int edgeCount = 0;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (adj[i][j] != 0 && adj[i][j] != INF) {
                edges[edgeCount].src = i;
                edges[edgeCount].dest = j;
                edges[edgeCount].weight = adj[i][j];
                edgeCount++;
            }
        }
    }

    int distance[V][V];
    int path[V];
    int src = 0; // Source vertex (0-based index for vertex 1)

    BellmanFord(edges, distance, path, edgeCount, src);

    return 0;
}
