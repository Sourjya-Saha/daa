#include <stdio.h>
#include <limits.h>

#define INF INT_MAX
#define MAXV 100  // Maximum number of vertices

struct Edge {
    int src, dest, weight;
};

void printPath(int path[], int v) {
    if (path[v] == -1) {
        printf("%d", v + 1);
        return;
    }
    printPath(path, path[v]);
    printf(" -> %d", v + 1);
}

void BellmanFord(struct Edge edges[], int V, int distance[MAXV][MAXV], int path[], int edgeCount, int src) {
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            distance[i][j] = INF;
        }
        path[i] = -1;
    }

    distance[0][src] = 0;

    for (int i = 1; i < V; i++) {
        for (int j = 0; j < V; j++) {
            distance[i][j] = distance[i - 1][j];
        }

        for (int j = 0; j < edgeCount; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int w = edges[j].weight;

            if (distance[i - 1][u] != INF && distance[i - 1][u] + w < distance[i][v]) {
                distance[i][v] = distance[i - 1][u] + w;
                path[v] = u;
            }
        }
    }

    int hasNegativeCycle = 0;
    for (int j = 0; j < edgeCount; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int w = edges[j].weight;

        if (distance[V - 1][u] != INF && distance[V - 1][u] + w < distance[V - 1][v]) {
            hasNegativeCycle = 1;
            break;
        }
    }

    printf("\n\t");
    for (int i = 0; i < V; i++) {
        printf("1->%d\t", i + 1);
    }
    printf("\n");

    for (int i = 1; i < V; i++) {
        printf("%d\t", i);
        for (int j = 0; j < V; j++) {
            if (distance[i][j] == INF)
                printf("#\t");
            else
                printf("%d\t", distance[i][j]);
        }
        printf("\n");
    }

    if (hasNegativeCycle) {
        printf("\nNegative weight cycle detected!\n");
        return;
    }

    printf("\nNo negative weight cycle detected.\n");

    printf("\nShortest Paths from Source (1):\n");
    for (int i = 1; i < V; i++) {
        if (distance[V - 1][i] == INF) {
            printf("Path to %d: No path available\n", i + 1);
        } else {
            printf("Path to %d: ", i + 1);
            printPath(path, i);
            printf(" | Total Weight: %d\n", distance[V - 1][i]);
        }
    }
}

int main() {
    int V, E;
    printf("Enter number of vertices: ");
    scanf("%d", &V);

    printf("Enter number of edges: ");
    scanf("%d", &E);

    struct Edge edges[E];
    for (int i = 0; i < E; i++) {
        int u, v, w;
        printf("Enter edge %d (source destination weight): ", i + 1);
        scanf("%d %d %d", &u, &v, &w);
        edges[i].src = u - 1; // convert to 0-based indexing
        edges[i].dest = v - 1;
        edges[i].weight = w;
    }

    int distance[MAXV][MAXV];
    int path[MAXV];
    int src = 0; // start from vertex 1 (index 0)

    BellmanFord(edges, V, distance, path, E, src);

    return 0;
}
